{"version":3,"sources":["card.js","Cardlist.js","Scroll.js","searchbox.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robots","map","user","i","Scroll","props","style","overflowY","border","height","children","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchchange","event","setState","target","value","state","fetch","then","response","json","users","filteredrobots","this","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"6PAaeA,EAXH,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GACrB,OACI,sBAAKC,UAAW,sDAAhB,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACI,6BAAKF,IACL,4BAAIC,WCcLK,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OACI,8BAEMA,EAAOC,KAAI,SAACC,EAAKC,GACf,OACA,cAAC,EAAD,CAEAR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCANC,G,MARD,SAACC,GACX,OACI,qBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,SAAlE,SACKJ,EAAMK,aCUJC,EAdE,SAAC,GAAgC,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC7B,OACI,qBAAKjB,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVkB,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCyCXI,G,wDA3CX,aAAc,IAAD,8BACT,gBAiBJC,eAAe,SAACC,GACZ,EAAKC,SAAS,CACVR,YAAaO,EAAME,OAAOC,SAlB9B,EAAKC,MAAM,CACPvB,OAAQ,GACRY,YAAa,IAJR,E,qDAQb,WAAoB,IAAD,OACfY,MAAM,8CAA8CC,MAAK,SAAAC,GACrD,OAAOA,EAASC,UAEnBF,MAAM,SAAAG,GACH,EAAKR,SAAS,CAACpB,OAAO4B,S,oBAY9B,WAAS,IAAD,OACEC,EAAeC,KAAKP,MAAMvB,OAAO+B,QAAO,SAAA/B,GAC1C,OAAOA,EAAOP,KAAKuC,cAAcC,SAAS,EAAKV,MAAMX,YAAYoB,kBAErE,OACI,sBAAKpC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWiB,aAAciB,KAAKZ,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,CAAUlB,OAAQ6B,a,GAnCpBK,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACD,8BACE,cAAC,EAAD,MAEPC,SAASC,eAAe,SAK3BX,M","file":"static/js/main.56ed66e2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card =({name,email,id})=> {\n    return(\n        <div className ='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200*200`}/>  \n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\nexport default Card;","import React from 'react';\nimport Card from './card';\n\nconst Cardlist = ({robots}) => {\n\n    return(\n        <div>\n          {\n              robots.map((user,i) =>{\n                return (\n                <Card \n                key={i}\n                id={robots[i].id} \n                name={robots[i].name} \n                email={robots[i].email}/>\n                );\n              })\n          }\n        </div>\n    );\n}\n\nexport default Cardlist;","import React from 'react';\nimport './Scroll.css';\n\nconst Scroll =(props)=>{\n    return(\n        <div style={{overflowY:'scroll', border:'1px solid black', height:'800px'}}>\n            {props.children}     \n        </div>\n    )\n}\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox =({ searchfield, searchChange })=>{\n    return(\n        <div className='pd2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n        \n    )\n}\n\nexport default SearchBox;","import React,{Component} from 'react';\nimport Cardlist from './Cardlist';\nimport Scroll from './Scroll';\nimport SearchBox from './searchbox';\nimport './App.css';\n\nclass App extends Component{\n    constructor(){\n        super()\n        this.state={\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users').then(response =>{\n            return response.json();\n        })\n        .then( users =>{\n            this.setState({robots:users})\n        })\n\n    }\n\n    onSearchchange=(event)=>{\n        this.setState({\n            searchfield: event.target.value\n        }) \n        \n    }\n\n    render(){\n        const filteredrobots=this.state.robots.filter(robots=>{\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        })\n        return(\n            <div className='tc'>\n                <h1 className='f1'>Robofriends</h1>\n                <SearchBox searchChange={this.onSearchchange}/>\n                <Scroll>\n                    <Cardlist robots={filteredrobots} />\n                </Scroll>\n                \n\n            </div>\n        )\n    }\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n        <div>\n          <App/>\n        </div>\n  ,document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}